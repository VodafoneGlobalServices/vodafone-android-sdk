apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'jacoco'

dependencies {
    testCompile project(':sdk')

    testCompile ('com.octo.android.robospice:robospice-okhttp:1.4.14') {
        exclude group: 'com.squareup.okhttp'
    }
    testCompile 'com.google.guava:guava:18.0'
    testCompile 'com.squareup.okhttp:mockwebserver:2.0.0'
    testCompile "org.codehaus.groovy:groovy-all:1.8.6"
    testCompile 'org.robospock:robospock:0.4.4'
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.objenesis:objenesis:2.1'
    testCompile fileTree(dir: project(":sdk").file("libs"), include: "*.jar")
    testCompile fileTree(dir: project(":sdk").file("build/libs"), include: "*.jar")
}

sourceSets.test.java.srcDirs += ['../sdk/build/generated/source/r/dit/release']

jacoco {
    toolVersion = "0.7.1.201405082137"
}

jacocoTestReport {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    executionData = fileTree(dir: "${buildDir}/jacoco", include: '**/*.exec')
    additionalSourceDirs = files(['../sdk/build/generated/source/r/dit/release', '../sdk/src/main/java'])
    additionalClassDirs = files(["../sdk/build/intermediates/classes/dit/release/com/vodafone/global/sdk"])
}

test {
    testLogging {
        lifecycle {
            exceptionFormat "full"
        }
    }
    workingDir = '../sdk/src/main'
    jacoco {
        append = true
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

tasks["compileJava"].dependsOn ":sdk:zip2jar"
